# Complete path to local analysis folder
# Example: /home/user1/Documents/project1/01_tcga_data_analysis_1/
analysis_path: 

# Original (prior) manifest files names (in folder <analysis_path>/sample_sheets/manifests)
# Use the list format (put your files in square brackets and comma-separated)
# Example: [2024-06_manifest_2.txt, 2024-05_manifest_1.txt]
manifests_prior: []

# Original (prior) sample sheets names (in folder <analysis_path>/sample_sheets/sample_sheets_prior)
# Use the list format (put your files in square brackets and comma-separated)
# Example: [2024-05_sample_sheet_1.tsv, 2024-06_sample_sheet_2.tsv]
sample_sheets_prior: []

# Sample sheet with case IDs to filter for (in folder <analysis_path>/sample_sheets).
# If not wanted or needed, put in: False
sample_sheet_filtering: False

# Conda environment for gdc-client download. Use one of the following options:
#   First_install: if you want to install the gdc-client as a conda environment. Set to True after first installation. If the installatation should be started again, set to "First_install" again
#   True: if you have installed the conda environment as gdc_client within this script (automatically set to True after first installation)
#   <Name for conda environment including the TCGA GDC-Client tool>: if you want to use your own environment
#   False: do not use this Jupyter Notebook for the gdc-client
conda_gdc: First_install

# Specify manifest file for downloading TCGA data
# Either enter a list of manifest files manually (in folder <analysis_path>/sample_sheets/manifests), use list format (put your files in square brackets and comma-separated)
# False: use the output of the pipeline
manifest_for_download: False

# Optional TCGA user token for restricted access files
# Include secured file path with TCGA user token
# False: no TCGA user token if none is available or necessary
tcga_user_token_file: False

# Methods dictionary for creating analysis folders for TCGA files
# Adapt the dictionary, if you want to use other folder names or want to add methods (<method_in_file_name>:<method_folder_name>)
methods_dict: {'BRASS':'BRASS', 'CaVEMan':'CaVEMan', 'ASCAT':'CNV_segment', 'pindel':'Pindel', 'star_splice':'Splicing', 
               'star_gene_counts':'STAR_counts'}

### Snakemake analysis pipeline configuration
# Name of the conda environment for Snakemake pipeline
conda_snakemake: Snakemake

# How many threads to use in the Snakemake pipeline
snakemake_threads: 4

# Which analysis methods should be used and analyzed with the Snakemake pipeline
# Enter a list of analysis methods from the methods dictionary (in square brackets)
# Example: [Splicing, STAR_counts]
snakemake_methods: []

# Which case IDs should be analyzed with the Snakemake pipeline
# True: use the case IDs of the manifest(s) specified in "manifest_for_download"
# Or enter a path of a file with a table of files you want to analyse with the following columns:
#     Case ID: case id
#     Path_sample: full file path to the file
#     Folder: folder name of the analysis
snakemake_caseids: True

